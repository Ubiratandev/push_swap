#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
typedef struct Node {
    int content;
    int index;
    struct Node *next;
    struct Node *previous;
} Stack;

void insert_on_tail(Stack **head, int content);
Stack *create_node(int num) {
    Stack *new_node = (Stack *)malloc(sizeof(Stack));
    if (!new_node)
        return NULL;
    new_node->content = num;
    new_node->next = NULL;
    new_node->previous = NULL;
    return new_node;
}


void insert_on_top(Stack **head, int content)
{
        Stack   *new_node;

        new_node = create_node(content);
        if(head == NULL)
        {
                *head = new_node;
                return;
        }
        new_node->next = *head;
        new_node->previous = NULL;
        (*head)->previous = new_node;
        *head = new_node;
}

void push(Stack **origin, Stack **destiny)
{
        int     content;
        Stack   *temp;

        content = (*origin)->content;
        if (*destiny == NULL)
                insert_on_tail(origin, content);
        else
        {
                insert_on_top(destiny, content);
        }
        temp = (*origin)->next;
        free(*origin);
        *origin = temp;
        if(*origin != NULL)
                (*origin)->previous = NULL;

}

void    swap(Stack **head, char *tag)
{
        if(head == NULL || *head == NULL || (*head)->next == NULL)
        {
                return;
        }
        Stack *first;
        Stack *second;

        first = *head;
        second = first->next;
        first->next = second->next;
        if(second->next != NULL)
                second->next->previous = first;
        first->previous = second;
        second->next = first;
        second->previous = NULL;
        *head = second;
}

int ft_atoi(char *str) {
    int result = 0;
    int signal = 1;

    while (*str == ' ' || *str <= 32) // Ignora espaços e caracteres de controle
        str++;
    if (*str == '-') {
        signal = -1;
        str++;
    } else if (*str == '+') {
        str++;
    }
    while (*str >= '0' && *str <= '9') {
        result = result * 10 + (*str - '0');
        str++;
    }
    return (result * signal);
}

void display_list(Stack *head) {
    Stack *temp = head;
    if(head == NULL || !head)
            return;
    while (temp != NULL) {
        printf("%d -> ", temp->content);
        temp = temp->next;
    }
    printf("NULL\n");
}
/*
void insert_on_tail(Stack **head, int content) {
    Stack *new_node = create_node(content);
    Stack       *temp;
    Stack       *previous;

    temp = *head;
    if (*head == NULL) {
        *head = new_node;
        return;
    }
    while(temp->next != NULL)
    {
        temp = temp->next;
    }
    temp->next =new_node;
    new_node->previous = temp;
    new_node->next = NULL;
}
*/
void insert_on_tail(Stack **head, int content) {
    Stack *new_node = create_node(content);
    Stack *temp;

    if (!new_node) // Verifica falha de alocação
        return;

    if (*head == NULL) { // Se a lista estiver vazia
        *head = new_node;
        return;
    }

    temp = *head;
    while (temp->next != NULL) // Encontra o último nó
        temp = temp->next;

    temp->next = new_node;
    new_node->previous = temp;
    new_node->next = NULL;
}

int	main(int argc, char *argv[])
{
	Stack	*a;
	Stack	*b;
	int	i;
	
	b = NULL;
	a = NULL;
	i = 1;
	while(i < argc)
		insert_on_tail(&a, ft_atoi(argv[i++]));
	display_list(a);
	push(a,b);
	display(b);	
}
